
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())   
  email     String   @unique                
  username  String  @unique
  password  String  
  name  String?
  avatar String?
  createdAt DateTime @default(now())

  posts Post[]
  likes Like[]
  notifications Notification[]
  comments Comment[]

    following     Follow[] @relation("UserFollowing")
  followers     Follow[] @relation("UserFollowers")


  }

  model Post{
    id        String   @id @default(cuid())   
    userId String
    content String
    imageUrl String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    originalPostId String?
    originalPost   Post?    @relation("SharedPosts", fields: [originalPostId], references: [id], onDelete: Cascade)
    sharedPosts    Post[]   @relation("SharedPosts")
 
    user User @relation(fields:[userId],references: [id])
    likes Like[]
    notifications Notification[] 
    comments Comment[]

  }

  model Like {
    id String @id @default(cuid())
    userId String
    postId String
    createdAt DateTime @default(now())

    user User @relation(fields:[userId], references: [id])
  post Post @relation(fields:[postId], references: [id], onDelete: Cascade)
    @@unique([userId,postId])
  }

  model Notification {
  id          String   @id @default(uuid())
  userId      String   // Receiver
  type        String   
  message     String   
  data        Json?
  read        Boolean  @default(false)
  postId      String?  
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment{
  id String @id @default(uuid())
  userId String
  content String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

}

model Follow{
    id String @id @default(uuid())
      followerId String
      followingId String
      createdAt DateTime @default(now())

    follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)



  @@unique([followerId, followingId])

}